name: Main

on:
  pull_request:
  push:
    branches:
      - '*'
    tags:
      - 'v*'

jobs:
  install:
    name: Install
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: 16
      - run: npm i -g npm@latest
      - uses: actions/cache@v2
        id: cache-node_modules
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install Node.js modules
        if: steps.cache-node_modules.outputs.cache-hit != 'true'
        run: npm ci

  lint:
    needs: install
    name: ESLint
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: 16
      - uses: actions/cache@v2
        id: cache-node_modules
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: ESLint
        run: npm run lint

  typecheck:
    needs: install
    name: TypeScript Compiler check
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: 16
      - uses: actions/cache@v2
        id: cache-node_modules
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: ESLint
        run: npm run typecheck

  build:
    if: ${{ startsWith(github.ref, 'refs/heads/') }} # only for commits
    needs: install
    name: Build
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js 16
        uses: actions/setup-node@v1
        with:
          node-version: 16
      - uses: actions/cache@v2
        id: cache-node_modules
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Build
        run: npm run --workspaces build
        env:
          NEXT_TELEMETRY_DISABLED: '1'

  deploy:
    if: ${{ startsWith(github.ref, 'refs/tags/v') }} # only for tags
    needs:
      - lint
      - typecheck
    name: Deploy
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js 16
        uses: actions/setup-node@v1
        with:
          node-version: 16
      - uses: actions/cache@v2
        id: cache-node_modules
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1
      - name: Serverless AWS authentication
        run: npx serverless --component=serverless-next config credentials --provider aws --key ${{ secrets.AWS_ACCESS_KEY_ID }} --secret ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Serverless state download
        run: npm run serverless:state:download
      - name: Serverless deploy
        env:
          NEXT_TELEMETRY_DISABLED: '1'
        run: npm run serverless:deploy
      - name: Serverless state upload
        run: npm run serverless:state:upload
