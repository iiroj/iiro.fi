{
  "name": "oauth2orize",
  "version": "1.0.1",
  "description": "OAuth 2.0 authorization server toolkit for Node.js.",
  "keywords": [
    "oauth",
    "oauth2",
    "auth",
    "authz",
    "authorization",
    "connect",
    "express",
    "passport",
    "middleware"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/jaredhanson/oauth2orize.git"
  },
  "bugs": {
    "url": "http://github.com/jaredhanson/oauth2orize/issues"
  },
  "author": {
    "name": "Jared Hanson",
    "email": "jaredhanson@gmail.com",
    "url": "http://www.jaredhanson.net/"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "./lib",
  "dependencies": {
    "uid2": "0.0.x",
    "utils-merge": "1.x.x",
    "debug": "0.7.x"
  },
  "devDependencies": {
    "mocha": "1.x.x",
    "chai": "1.x.x",
    "chai-connect-middleware": "0.3.x",
    "chai-oauth2orize-grant": "0.2.x"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "scripts": {
    "test": "mocha --reporter spec --require test/bootstrap/node test/*.test.js test/**/*.test.js"
  },
  "readme": "# OAuth2orize\n\n[![Build](https://travis-ci.org/jaredhanson/oauth2orize.png)](http://travis-ci.org/jaredhanson/oauth2orize)\n[![Coverage](https://coveralls.io/repos/jaredhanson/oauth2orize/badge.png)](https://coveralls.io/r/jaredhanson/oauth2orize)\n[![Dependencies](https://david-dm.org/jaredhanson/oauth2orize.png)](http://david-dm.org/jaredhanson/oauth2orize)\n\n\nOAuth2orize is an authorization server toolkit for Node.js.  It provides a suite\nof middleware that, combined with [Passport](http://passportjs.org/)\nauthentication strategies and application-specific route handlers, can be used\nto assemble a server that implements the [OAuth 2.0](http://tools.ietf.org/html/rfc6749)\nprotocol.\n\n## Install\n\n    $ npm install oauth2orize\n\n## Usage\n\nOAuth 2.0 defines an authorization framework, allowing an extensible set of\nauthorization grants to be exchanged for access tokens.  Implementations are\nfree to choose what grant types to support, by using bundled middleware to\nsupport common types or plugins to support extension types.\n\n#### Create an OAuth Server\n\nCall `createServer()` to create a new OAuth 2.0 server.  This instance exposes\nmiddleware that will be mounted in routes, as well as configuration options.\n\n    var server = oauth2orize.createServer();\n\n#### Register Grants\n\nA client must obtain permission from a user before it is issued an access token.\nThis permission is known as a grant, the most common type of which is an\nauthorization code.\n\n    server.grant(oauth2orize.grant.code(function(client, redirectURI, user, ares, done) {\n      var code = utils.uid(16);\n\n      var ac = new AuthorizationCode(code, client.id, redirectURI, user.id, ares.scope);\n      ac.save(function(err) {\n        if (err) { return done(err); }\n        return done(null, code);\n      });\n    }));\n\nOAuth2orize also bundles support for implicit token grants.\n\n#### Register Exchanges\n\nAfter a client has obtained an authorization grant from the user, that grant can\nbe exchanged for an access token.\n\n    server.exchange(oauth2orize.exchange.code(function(client, code, redirectURI, done) {\n      AuthorizationCode.findOne(code, function(err, code) {\n        if (err) { return done(err); }\n        if (client.id !== code.clientId) { return done(null, false); }\n        if (redirectURI !== code.redirectUri) { return done(null, false); }\n\n        var token = utils.uid(256);\n        var at = new AccessToken(token, code.userId, code.clientId, code.scope);\n        at.save(function(err) {\n          if (err) { return done(err); }\n          return done(null, token);\n        });\n      });\n    }));\n\nOAuth2orize also bundles support for password and client credential grants.\nAdditionally, bundled refresh token support allows expired access tokens to be\nrenewed.\n\n#### Implement Authorization Endpoint\n\nWhen a client requests authorization, it will redirect the user to an\nauthorization endpoint.  The server must authenticate the user and obtain\ntheir permission.\n\n    app.get('/dialog/authorize',\n      login.ensureLoggedIn(),\n      server.authorize(function(clientID, redirectURI, done) {\n        Clients.findOne(clientID, function(err, client) {\n          if (err) { return done(err); }\n          if (!client) { return done(null, false); }\n          if (!client.redirectUri != redirectURI) { return done(null, false); }\n          return done(null, client, client.redirectURI);\n        });\n      }),\n      function(req, res) {\n        res.render('dialog', { transactionID: req.oauth2.transactionID,\n                               user: req.user, client: req.oauth2.client });\n      });\n\nIn this example, [connect-ensure-login](https://github.com/jaredhanson/connect-ensure-login)\nmiddleware is being used to make sure a user is authenticated before\nauthorization proceeds.  At that point, the application renders a dialog\nasking the user to grant access.  The resulting form submission is processed\nusing `decision` middleware.\n\n     app.post('/dialog/authorize/decision',\n       login.ensureLoggedIn(),\n       server.decision());\n       \nBased on the grant type requested by the client, the appropriate grant\nmodule registered above will be invoked to issue an authorization code.\n\n#### Session Serialization\n\nObtaining the user's authorization involves multiple request/response pairs.\nDuring this time, an OAuth 2.0 transaction will be serialized to the session.\nClient serialization functions are registered to customize this process, which\nwill typically be as simple as serializing the client ID, and finding the client\nby ID when deserializing.\n\n    server.serializeClient(function(client, done) {\n      return done(null, client.id);\n    });\n\n    server.deserializeClient(function(id, done) {\n      Clients.findOne(id, function(err, client) {\n        if (err) { return done(err); }\n        return done(null, client);\n      });\n    });\n\n#### Implement Token Endpoint\n\nOnce a user has approved access, the authorization grant can be exchanged by the\nclient for an access token.\n\n    app.post('/token',\n      passport.authenticate(['basic', 'oauth2-client-password'], { session: false }),\n      server.token(),\n      server.errorHandler());\n\n[Passport](http://passportjs.org/) strategies are used to authenticate the\nclient, in this case using either an HTTP Basic authentication header (as\nprovided by [passport-http](https://github.com/jaredhanson/passport-http)) or\nclient credentials in the request body (as provided by \n[passport-oauth2-client-password](https://github.com/jaredhanson/passport-oauth2-client-password)).\n\nBased on the grant type issued to the client, the appropriate exchange module\nregistered above will be invoked to issue an access token.  If an error occurs,\n`errorHandler` middleware will format an error response.\n\n#### Implement API Endpoints\n\nOnce an access token has been issued, a client will use it to make API requests\non behalf of the user.\n\n    app.get('/api/userinfo', \n      passport.authenticate('bearer', { session: false }),\n      function(req, res) {\n        res.json(req.user);\n      });\n\nIn this example, bearer tokens are issued, which are then authenticated using\nan HTTP Bearer authentication header (as provided by [passport-http-bearer](https://github.com/jaredhanson/passport-http-bearer))\n\n## Examples\n\nThis [example](https://github.com/jaredhanson/oauth2orize/tree/master/examples/express2) demonstrates\nhow to implement an OAuth service provider, complete with protected API access.\n\n## Related Modules\n\n- [oauth2orize-openid](https://github.com/jaredhanson/oauth2orize-openid) — Extensions to support OpenID Connect\n- [oauth2orize-jwt-bearer](https://github.com/xtuple/oauth2orize-jwt-bearer) — Exchange JWT assertions for access tokens\n- [passport-http-bearer](https://github.com/jaredhanson/passport-http-bearer) — Bearer token authentication strategy for APIs\n\n## Tests\n\n    $ npm install\n    $ npm test\n\n## Credits\n\n  - [Jared Hanson](http://github.com/jaredhanson)\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2012-2013 Jared Hanson <[http://jaredhanson.net/](http://jaredhanson.net/)>\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/jaredhanson/oauth2orize",
  "_id": "oauth2orize@1.0.1",
  "_shasum": "eceb666b641caf717df43e63511518796c93642d",
  "_resolved": "https://registry.npmjs.org/oauth2orize/-/oauth2orize-1.0.1.tgz",
  "_from": "https://registry.npmjs.org/oauth2orize/-/oauth2orize-1.0.1.tgz"
}
