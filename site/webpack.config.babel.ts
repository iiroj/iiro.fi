/**
 * Register babel to all extensions so that
 * `./server/renderer.tsx` works correctly
 */
// eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-var-requires
require('@babel/register')({
    extensions: ['.es6', '.es', '.jsx', '.js', '.mjs', '.ts', '.tsx'],
})

import { VanillaExtractPlugin } from '@vanilla-extract/webpack-plugin'
import CopyPlugin from 'copy-webpack-plugin'
import HtmlRendererWebpackPlugin from 'html-renderer-webpack-plugin'
import MiniCssExtractPlugin from 'mini-css-extract-plugin'
import path from 'path'
import TerserJSPlugin from 'terser-webpack-plugin'
import type { Configuration as WebpackConfiguration } from 'webpack'
import { BundleAnalyzerPlugin } from 'webpack-bundle-analyzer'
import type { Configuration as DevServerConfiguration } from 'webpack-dev-server'
import { SubresourceIntegrityPlugin } from 'webpack-subresource-integrity'

const renderer = path.resolve('./server/renderer.tsx')

const isProduction = process.env.NODE_ENV === 'production'

type Configuration = WebpackConfiguration & {
    devServer: DevServerConfiguration
}

const configuration: Configuration = {
    devServer: {
        historyApiFallback: { index: '/404.html' },
        hot: false,
        liveReload: true,
        port: 3000,
        static: path.resolve('./public'),
    },

    mode: isProduction ? 'production' : 'development',

    target: 'browserslist',

    devtool: isProduction ? 'source-map' : false,

    entry: {
        client: path.resolve('./client/index.tsx'),
    },

    experiments: {
        outputModule: true,
    },

    output: {
        crossOriginLoading: 'anonymous',
        chunkFilename: isProduction ? 'build/[name].[contenthash].js' : 'build/[name].js',
        filename: isProduction ? 'build/[name].[contenthash].js' : 'build/[name].js',
        module: true,
        path: path.resolve('./dist'),
        publicPath: '/',
    },

    resolve: {
        extensions: ['.js', '.jsx', '.ts', '.tsx'],
    },

    module: {
        rules: [
            {
                exclude: undefined,
                test: /\.(jsx?|tsx?)$/,
                use: [
                    {
                        loader: 'babel-loader',
                        options: { envName: isProduction ? 'webpack_production' : 'webpack_development' },
                    },
                ],
            },
            {
                /** Target only CSS files generated by vanilla-extract */
                test: /\.vanilla\.css$/i,
                use: [MiniCssExtractPlugin.loader, { loader: require.resolve('css-loader') }],
            },
        ],
    },

    plugins: [
        new CopyPlugin({
            patterns: [{ from: 'public', to: '.' }],
        }),
        new VanillaExtractPlugin(),
        new MiniCssExtractPlugin({
            filename: isProduction ? 'build/[name].[contenthash].css' : 'build/[name].css',
            experimentalUseImportModule: true,
        }),
        new SubresourceIntegrityPlugin(),
        new HtmlRendererWebpackPlugin({
            paths: ['/', '/404'],
            renderer,
        }),
    ].filter(Boolean),

    optimization: {
        chunkIds: isProduction ? 'deterministic' : 'named',
        minimizer: isProduction
            ? [
                  new TerserJSPlugin({
                      extractComments: false,
                      terserOptions: {
                          compress: {
                              arguments: true,
                              ecma: 2020,
                              module: true,
                              passes: 2,
                              unsafe_arrows: true,
                          },
                          output: {
                              comments: false,
                              ecma: 2020,
                          },
                          ecma: 2020,
                          module: true,
                      },
                  }),
                  new BundleAnalyzerPlugin({
                      analyzerMode: 'disabled',
                      generateStatsFile: true,
                      openAnalyzer: false,
                  }),
              ]
            : undefined,
        moduleIds: isProduction ? 'deterministic' : 'named',
        removeAvailableModules: isProduction,
        runtimeChunk: 'single',
        splitChunks: {
            chunks: 'async',
            minSize: 500,
        },
    },
}

export default configuration
